#!/usr/bin/env node

var commander = require('commander'),
    path      = p = require('path'),
    fs        = require('fs'),
    chalk     = require('chalk'),
    _         = require('lodash'),
    pkg       = require('../package.json'),
    Monitor   = require('../lib/mon'),
    crypto    = require('crypto'),
    interface = require('../web/index');

commander.version(pkg.version, '-v, --version')
  .usage('[cmd] [options]');

commander.on('--help', function(){
  console.log('  Basic Examples:\n\n' +
    '    Start the web server, by default port (8088):\n' +
    chalk.grey('    $ pm2-gui start\n') +
    '\n' +
    '    Start the web server, by specific port (8090):\n' +
    chalk.grey('    $ pm2-gui start 8090\n')
  );
});
commander.on('-c', function(){
  console.log(arguments);
})

var defaultConfigFileName = 'pm2-gui.json';
var acceptKeys = ['pm2', 'refresh', 'manipulation', 'password'];

// Web interface
commander.command('start [port]')
  .option('--config <file>', 'pass json config file with options')
  .option('--no-debug', 'hide stdout/stderr information')
  .description('Launch the web server, port default by 8088')
  .action(function(port, cmd){

    function setupOptions(jsonConfig) {
      var mon = Monitor();
      var passwordKeyName = acceptKeys[acceptKeys.length - 1];
      acceptKeys.forEach(function(keyName) {
        var value = jsonConfig[keyName];
        if (!value) {
          return;
        }
        if (keyName === passwordKeyName) {
          var md5 = crypto.createHash('md5');
          md5.update(value);
          value = md5.digest('hex');
        }
        mon.config(keyName, value);
      });
    }

    var configData;
    if (cmd.config){ //if config file passed

      try {
        configData = fs.readFileSync(cmd.config);
      } catch (e) {
        if (e.code === 'ENOENT') {
          console.log('Config file %s not found', cmd.config);
          process.exit(1);
        } else {
          console.log('Error read config file %s, error: %j', cmd.config, err);
          process.exit(2);
        }
      }
    } else {
      try {
        configData = fs.readFileSync(defaultConfigFileName);
      } catch (e) {}
    }

    try {
      var jsonConfig = JSON.parse(configData);
      setupOptions(jsonConfig);
    } catch (e) {
      console.log('Cant convert file %s to JSON', cmd.config);
      process.exit(3);
    }

    if (!port && jsonConfig.port) { // setup port from config file
      port = jsonConfig.port;
    }
    interface(port, cmd.debug);
  });

// Configuration
function showConfigs(cmd, mon){
  if (!mon) {
    mon = Monitor();
  }
  var storage = mon._config.store, prints = '';
  for (var k in storage) {
    prints += Array(15 - k.length).join(' ') + chalk.bold(k + ': ') + '  ' + chalk.blue(storage[k] + '\n');
  }
  console.log(prints);
}

commander.command('config')
  .description('show all configs')
  .action(showConfigs);

commander.command('set <key> <value>')
  .description('set config by key-value pairs')
  .action(function(key, value, cmd){
    if (!~acceptKeys.indexOf(key)) {
      return console.log('key could only be one of below:', acceptKeys.map(function(m){
        return '\n' + chalk.magenta(m)
      }).join(''));
    }
    var mon = Monitor();
    if (key == acceptKeys[acceptKeys.length - 1]) {
      var md5 = crypto.createHash('md5');
      md5.update(value);
      value = md5.digest('hex');
    }
    mon.config(key, value);
    showConfigs(cmd, mon);
  });

commander.command('rm <key>')
  .description('remove config by key')
  .action(function(key, cmd){
    var mon = Monitor();
    mon.config(key, null);
    showConfigs(cmd, mon);
  });

commander.parse(process.argv);

if (process.argv.length == 2) {
  commander.outputHelp();
  process.exit(0);
}